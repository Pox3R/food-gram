# –∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore

import requests
import random
from pyzbar.pyzbar import decode
from PIL import Image
# —Ç–æ–∫–µ–Ω  –±–æ—Ç–∞
API_TOKEN = '1056772125:AAFQrxSVgSzMO3Ihc9Rb3n4Uqm9pYZAa5NQ'

# —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token = API_TOKEN)
bot.parse_mode = 'HTML'
dp = Dispatcher(bot)


# master_name - —Ç–æ—Ç –∫—Ç–æ —Å–ø—Ä–æ–≤–æ—Ü–∏—Ä–æ–≤–∞–ª –∑–∞–∫–∞–∑ (start)
global order_info
order_info = {'chat_id': '', 'master_name': '', 'master_id': ''}


global orders # –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑-–π —á–µ—Ä–µ–∑ makeorder
orders = {}
# –±–æ—Ç –∑–∞–ø—É—â–µ–Ω = 1 –∏–Ω–∞—á–µ 0 - –Ω—É–∂–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∏–∂–µ
global txt_en
txt_en = 0

firebase_admin.initialize_app(
    credentials.Certificate('credentials.json')
)
db = firestore.client()


#—Ä–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç–ø—Ä–∞–∏—Ç—å —Ñ–æ—Ç–æ
global ph_enable
ph_enable = 0

def get_inf(what):  # –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è...
    MethodGetUpdates = 'https://api.telegram.org/bot{token}/getUpdates'.format(token=API_TOKEN)
    response = requests.post(MethodGetUpdates)
    results = response.json()
    if what == 'user_id':  #...id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(results)
        return results['result'][0]['message']['from']['id']
    if what == 'chat_id': #...id —á–∞—Ç–∞
        return results['result'][0]['message']['chat']['id']
    if what == 'user_name':    #...–∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return results['result'][0]['message']['from']['first_name']
    if what == 'chat_name':  # ...–∏–º–µ–Ω–∏ —á–∞—Ç–∞
        return results['result'][0]['message']['chat']['title'] \
               or results['result'][0]['message']['chat']['first_name']
    return -1


def init(): # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    if '' not in order_info.values(): # –µ—Å–ª–∏ —É–∂–µ –±—ã–ª –∑–∞–∫–∞–∑, –ø–æ–ª—è –Ω–µ–ø—É—Å—Ç—ã–µ
        return 0
    order_info['master_id'] = get_inf('user_id')
    order_info['master_name'] = get_inf('user_name')
    order_info['chat_id'] = get_inf('chat_id')
    if -1 in order_info.values(): # –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ-–∏–∏
        return 0
    return 1


# –æ–±—Ä–∞–±–æ—Ç–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def if_start(message: types.Message):

    if init(): # –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è, –∏–Ω–∏—Ü-–º –≥–ª–∞–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏ —á–∞—Ç –∑–∞–∫–∞–∑–∞
        await bot.send_message(order_info['chat_id'], "–ü—Ä–∏–≤–µ—Ç, –±—É–¥–µ–º –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å\n<b>"\
                               + str(order_info['master_name'])\
                               + "</b> - –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞, –±—É–¥–µ—Ç –∏–º–µ—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∞ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏. –ü–∏—à–∏—Ç–µ –º–µ—Å—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π")
        await bot.send_message(order_info['master_id'], "–ü—Ä–∏–≤–µ—Ç, " + str(order_info['master_name']) \
                               + " –¢—ã —Ä–µ—à–∏–ª —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≤ —á–∞—Ç–µ " + get_inf('chat_name') +" üòé ")
    else: # –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–∞—á–∞—Ç
        await bot.send_message(order_info['chat_id'], get_inf('user_name')\
                               + '! –ó–∞–∫–∞–∑ —É–∂–µ –¥–µ–ª–∞–µ—Ç—Å—è! –ù–µ —Ö—É–ª–∏–≥–∞–Ω—å. üò†')

    some_data = {'event': 'send_start_message', 'user_id': message.from_user.id, 'message_id': message.message_id}
    db.collection('events').add(some_data)
    await bot.send_message(get_id(), "–ü—Ä–∏–≤–µ—Ç!\n–ü–æ–º–æ–≥—É —Ç–µ–±–µ –∏ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞.")




@dp.message_handler(commands=['makeorder'])
async def if_makeorder(message: types.Message):
    id_tmp = get_inf('user_id')
    chat_tmp = get_inf('chat_id')
    # –∑–∞–∫–∞–∑ —É–∂–µ –∫—Ç–æ-—Ç–æ –Ω–∞—á–∞–ª => –≤ —Å–ª–æ–≤–∞—Ä–µ order_info –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å '':
    if '' not in order_info.values():
        if id_tmp not in orders: # –µ—Å–ª–∏ —é–∑–µ—Ä –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª –∑–∞–∫–∞–∑
            orders[id_tmp]={} # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ—Ö –∫—Ç–æ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç
            await bot.send_message(chat_tmp, "<b>" +\
                                   get_inf('user_name') + "</b> –¥–µ–ª–∞–µ—Ç –∑–∞–∫–∞–∑")
            await bot.send_message(message.from_user.id, "–ó–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /eat")
        else: # –µ—Å–ª–∏ —é–∑–µ—Ä –¥–µ–ª–∞–ª –∑–∞–∫–∞–∑
            await bot.send_message(message.from_user.id, '–ó–∞–∫–∞–∑—ã–≤–∞–π –∂–µ!')
    else: # –∑–∞–∫–∞–∑ net
        await bot.send_message(chat_tmp, '–ó–∞–∫–∞–∑ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç')

@dp.message_handler(content_types=['text'])
async def eat_message(msg: types.Message):
    global txt_en
    if msg.text == '/eat':
        txt_en = 1
        await bot.send_message(msg.from_user.id, '–ü–∏—à–∏ –ø—É–Ω–∫—Ç—ã –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å')
        return
    elif msg.text == '/bill':
        global ph_enable
        ph_enable = 1
        await bot.send_message(msg.from_user.id, '–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —á–µ–∫–∞\n–§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–∫–∏–º')
    else:
        if txt_en:
            txt_en = 0
            if get_inf('user_id') not in orders:
                await bot.send_message(msg.from_user.id, "–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö! –ñ–º–∏—Ç–µ makeorder –≤ —á–∞—Ç–µ –∑–∞–∫–∞–∑–∞")
            else:
                tmp_id = get_inf('user_id')
                tmp_name = get_inf('user_name')
                orders[tmp_id][tmp_name] = {}
                for i in range(len(msg.text.split())):
                    orders[tmp_id][tmp_name][i] = msg.text.split()[i]
                to_out = []
                for i in orders[tmp_id][tmp_name]:
                    to_out.append('<b>'+str(i) + '</b> - ' + str(orders[tmp_id][tmp_name][i]))
                await bot.send_message(msg.from_user.id, "\n".join(to_out))








def bill_existing(fn, fd, fpd, date, sum):
    site = 'https://proverkacheka.nalog.ru:9999/v1/ofds/*/inns/*/fss/'\
           + fn + '/operations/1/tickets/' + fd
    payload = {'fiscalSign': fpd, 'date': date, 'sum': sum}
    response = requests.get(site, params=payload)
    if response.status_code == 204:
        return 1 # —á–µ–∫ –µ—Å—Ç—å –≤ –±–¥
    if response.status_code == 406:
        return 0 # —á–µ–∫–∞ –Ω–µ—Ç –∏–ª–∏ –¥–∞—Ç–∞/—Å—É–º–º–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è
    if response.status_code == 400:
        return -1  # –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    return -2 # –ø—Ä–æ—Å—Ç–æ –æ—à–∏–±–∫–∞


def bill_detal_inf(fn, fd, fpd):
    site = 'https://proverkacheka.nalog.ru:9999/v1/inns/*/kkts/*/fss/'\
           + fn + '/tickets/' + fd
    payload = {'fiscalSign': fpd, 'sendToEmail': 'no'}
    headers = {'device-id': '', 'device-os': '', 'Authorization': 'Basic Kzc5MTE5OTEyOTcxOjQ1ODQzMw=='}
    response = requests.get(site, params=payload, headers=headers)
    if response.status_code == 200:
        return response.json()
    #else:
    #    return -1
    return -1


@dp.message_handler(content_types=['photo'])
async def handle_docs_photo(message):
    global ph_enable
    if ph_enable:
        try:
            file_id = message.photo[len(message.photo)-1].file_id
            site = 'https://api.telegram.org/bot' \
                   + API_TOKEN + '/getFile?file_id=' \
                   + file_id
            gf = requests.get(site)
            site2 = 'https://api.telegram.org/file/bot'\
                    + API_TOKEN + '/'+ gf.json()['result']['file_path']
            df = requests.get(site2)
            with open(file_id+'.jpg', 'wb') as new_file:
                new_file.write(df.content)
            # os.startfile(r'ph1.jpg')
            qr_txt = decode(Image.open(file_id+'.jpg'))
            bill_par = {}
            bill_arr = str(qr_txt[0].data).replace("b'", '').split('&')
            for a in bill_arr:
                tmp = a.split('=')
                bill_par[tmp[0]] = tmp[1]
            # print(bill_par)

            a = bill_existing(bill_par['fn'], bill_par['i'], bill_par['fp'], bill_par['t'],
            bill_par['s'].replace(".", ""))
            if a:
                await bot.send_message(message.chat.id, '–ß–µ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω')
            else:
                await bot.send_message(message.chat.id, str(a))
            ret = bill_detal_inf(bill_par['fn'], bill_par['i'], bill_par['fp'])
            to_out = []
            for i in ret['document']['receipt']['items']:
                to_out.append(i['name'] + '\n<i>–°—Ç–æ–π–º—Å—Ç—å:</i> <b>' + str(i['price'] / 100) + '</b>\n')
            await bot.send_message(message.chat.id, ''.join(to_out), parse_mode="HTML")
        except Exception as e:
            await bot.send_message(message.chat.id, e)
    else:
        await bot.send_message(message.chat.id, '–ö —á–µ–º—É —Ç—ã —ç—Ç–æ?', reply_to_message_id=message)



if __name__ == '__main__':
    executor.start_polling(dp)
